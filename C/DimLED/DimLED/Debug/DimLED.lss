
DimLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077e  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c9  00000000  00000000  00000996  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028f  00000000  00000000  0000105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

uint8_t direction = 1;


static void inline init()   {
	DDRD |= (1 << DDD6);
  96:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << DDD6);     // PD6 is now an output
  98:	56 9a       	sbi	0x0a, 6	; 10
	OCR0A = 255;     // set PWM for 100% duty cycle
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= (1 << COM0A1);     // set none-inverting mode
  9e:	84 b5       	in	r24, 0x24	; 36
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01) | (1 << WGM00);     // set fast PWM Mode
  a4:	84 b5       	in	r24, 0x24	; 36
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);     // set prescaler to 8 and starts PWM
  aa:	85 b5       	in	r24, 0x25	; 37
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	85 bd       	out	0x25, r24	; 37
		}
		else
		direction = 0;
		else {
			if (OCR0A==255)
			direction = 1;
  b0:	91 e0       	ldi	r25, 0x01	; 1
	TCCR0B |= (1 << CS01);     // set prescaler to 8 and starts PWM
}

static void loop()  {
	while(1)    {
		if (direction)
  b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  b6:	88 23       	and	r24, r24
  b8:	99 f0       	breq	.+38     	; 0xe0 <main+0x4a>
		if (OCR0A)	{
  ba:	87 b5       	in	r24, 0x27	; 39
  bc:	88 23       	and	r24, r24
  be:	69 f0       	breq	.+26     	; 0xda <main+0x44>
			OCR0A >>= 1;
  c0:	87 b5       	in	r24, 0x27	; 39
  c2:	86 95       	lsr	r24
  c4:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	33 ed       	ldi	r19, 0xD3	; 211
  ca:	80 e3       	ldi	r24, 0x30	; 48
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	30 40       	sbci	r19, 0x00	; 0
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x36>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x40>
  d6:	00 00       	nop
  d8:	ec cf       	rjmp	.-40     	; 0xb2 <main+0x1c>
			_delay_ms(1000);
		}
		else
		direction = 0;
  da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
  de:	e9 cf       	rjmp	.-46     	; 0xb2 <main+0x1c>
		else {
			if (OCR0A==255)
  e0:	87 b5       	in	r24, 0x27	; 39
  e2:	8f 3f       	cpi	r24, 0xFF	; 255
  e4:	19 f4       	brne	.+6      	; 0xec <main+0x56>
			direction = 1;
  e6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
  ea:	e3 cf       	rjmp	.-58     	; 0xb2 <main+0x1c>
			else {
				OCR0A <<= 1;
  ec:	87 b5       	in	r24, 0x27	; 39
  ee:	88 0f       	add	r24, r24
  f0:	87 bd       	out	0x27, r24	; 39
				OCR0A += 1;
  f2:	87 b5       	in	r24, 0x27	; 39
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	87 bd       	out	0x27, r24	; 39
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	33 ed       	ldi	r19, 0xD3	; 211
  fc:	80 e3       	ldi	r24, 0x30	; 48
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	30 40       	sbci	r19, 0x00	; 0
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x68>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x72>
 108:	00 00       	nop
 10a:	d3 cf       	rjmp	.-90     	; 0xb2 <main+0x1c>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
