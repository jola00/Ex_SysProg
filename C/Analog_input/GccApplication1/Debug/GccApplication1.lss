
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000020c  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000002a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d6  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087a  00000000  00000000  00000d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ec  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000019b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051a  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000118  00000000  00000000  00001f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  9e:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADCRead>:

int ADCval;

int ADCRead()
{
	while(ADCSRA & (1 << ADSC));		// wait for finish reading ADC
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 fd       	sbrc	r24, 6
  ae:	fd cf       	rjmp	.-6      	; 0xaa <ADCRead+0x4>

	ADCval = ADCL;
  b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  b4:	28 2f       	mov	r18, r24
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__data_end+0x1>
  bc:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
	ADCval += (ADCH << 8);    // ADCH is read so ADC can be updated again
  c0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	98 2f       	mov	r25, r24
  c8:	88 27       	eor	r24, r24
  ca:	82 0f       	add	r24, r18
  cc:	93 1f       	adc	r25, r19
  ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
  d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>

	return ADCval;
}
  d6:	08 95       	ret

000000d8 <main>:


int main(void)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <main+0x6>
  de:	00 d0       	rcall	.+0      	; 0xe0 <main+0x8>
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	char buffer[5];
	
    usart_init();
  e6:	0e 94 a0 00 	call	0x140	; 0x140 <usart_init>
	
	// use ADC0 as input with 10 bit resolution and Avcc as reference
	ADMUX = 0;         
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);   
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);
  f6:	80 81       	ld	r24, Z
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 8Mhz
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	87 60       	ori	r24, 0x07	; 7
 104:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Enable the ADC
 106:	80 81       	ld	r24, Z
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
	
    while (1)	{	
		itoa(ADCRead(), buffer, 10);
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <ADCRead>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 116:	4a e0       	ldi	r20, 0x0A	; 10
 118:	be 01       	movw	r22, r28
 11a:	6f 5f       	subi	r22, 0xFF	; 255
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
 11e:	0e 94 cf 00 	call	0x19e	; 0x19e <__itoa_ncheck>
		buffer[4] = '\0';
 122:	1d 82       	std	Y+5, r1	; 0x05
		usart_send_string(buffer);
 124:	ce 01       	movw	r24, r28
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	0e 94 ba 00 	call	0x174	; 0x174 <usart_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	89 e6       	ldi	r24, 0x69	; 105
 130:	98 e1       	ldi	r25, 0x18	; 24
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x5a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x64>
 13c:	00 00       	nop
 13e:	e9 cf       	rjmp	.-46     	; 0x112 <main+0x3a>

00000140 <usart_init>:
 140:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 144:	87 e6       	ldi	r24, 0x67	; 103
 146:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 14a:	e1 ec       	ldi	r30, 0xC1	; 193
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	88 61       	ori	r24, 0x18	; 24
 152:	80 83       	st	Z, r24
 154:	e2 ec       	ldi	r30, 0xC2	; 194
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	86 60       	ori	r24, 0x06	; 6
 15c:	80 83       	st	Z, r24
 15e:	08 95       	ret

00000160 <usart_send>:
 160:	dc 01       	movw	r26, r24
 162:	e0 ec       	ldi	r30, 0xC0	; 192
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	90 81       	ld	r25, Z
 168:	95 ff       	sbrs	r25, 5
 16a:	fd cf       	rjmp	.-6      	; 0x166 <usart_send+0x6>
 16c:	8c 91       	ld	r24, X
 16e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 172:	08 95       	ret

00000174 <usart_send_string>:
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	fc 01       	movw	r30, r24
 17a:	20 81       	ld	r18, Z
 17c:	22 23       	and	r18, r18
 17e:	41 f0       	breq	.+16     	; 0x190 <usart_send_string+0x1c>
 180:	ec 01       	movw	r28, r24
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	0e 94 b0 00 	call	0x160	; 0x160 <usart_send>
 188:	ce 01       	movw	r24, r28
 18a:	28 81       	ld	r18, Y
 18c:	21 11       	cpse	r18, r1
 18e:	f8 cf       	rjmp	.-16     	; 0x180 <usart_send_string+0xc>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 b0 00 	call	0x160	; 0x160 <usart_send>
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <__itoa_ncheck>:
 19e:	bb 27       	eor	r27, r27
 1a0:	4a 30       	cpi	r20, 0x0A	; 10
 1a2:	31 f4       	brne	.+12     	; 0x1b0 <__itoa_ncheck+0x12>
 1a4:	99 23       	and	r25, r25
 1a6:	22 f4       	brpl	.+8      	; 0x1b0 <__itoa_ncheck+0x12>
 1a8:	bd e2       	ldi	r27, 0x2D	; 45
 1aa:	90 95       	com	r25
 1ac:	81 95       	neg	r24
 1ae:	9f 4f       	sbci	r25, 0xFF	; 255
 1b0:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__utoa_common>

000001b4 <__utoa_ncheck>:
 1b4:	bb 27       	eor	r27, r27

000001b6 <__utoa_common>:
 1b6:	fb 01       	movw	r30, r22
 1b8:	55 27       	eor	r21, r21
 1ba:	aa 27       	eor	r26, r26
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	aa 1f       	adc	r26, r26
 1c2:	a4 17       	cp	r26, r20
 1c4:	10 f0       	brcs	.+4      	; 0x1ca <__utoa_common+0x14>
 1c6:	a4 1b       	sub	r26, r20
 1c8:	83 95       	inc	r24
 1ca:	50 51       	subi	r21, 0x10	; 16
 1cc:	b9 f7       	brne	.-18     	; 0x1bc <__utoa_common+0x6>
 1ce:	a0 5d       	subi	r26, 0xD0	; 208
 1d0:	aa 33       	cpi	r26, 0x3A	; 58
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <__utoa_common+0x20>
 1d4:	a9 5d       	subi	r26, 0xD9	; 217
 1d6:	a1 93       	st	Z+, r26
 1d8:	00 97       	sbiw	r24, 0x00	; 0
 1da:	79 f7       	brne	.-34     	; 0x1ba <__utoa_common+0x4>
 1dc:	b1 11       	cpse	r27, r1
 1de:	b1 93       	st	Z+, r27
 1e0:	11 92       	st	Z+, r1
 1e2:	cb 01       	movw	r24, r22
 1e4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <strrev>

000001e8 <strrev>:
 1e8:	dc 01       	movw	r26, r24
 1ea:	fc 01       	movw	r30, r24
 1ec:	67 2f       	mov	r22, r23
 1ee:	71 91       	ld	r23, Z+
 1f0:	77 23       	and	r23, r23
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <strrev+0x4>
 1f4:	32 97       	sbiw	r30, 0x02	; 2
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <strrev+0x18>
 1f8:	7c 91       	ld	r23, X
 1fa:	6d 93       	st	X+, r22
 1fc:	70 83       	st	Z, r23
 1fe:	62 91       	ld	r22, -Z
 200:	ae 17       	cp	r26, r30
 202:	bf 07       	cpc	r27, r31
 204:	c8 f3       	brcs	.-14     	; 0x1f8 <strrev+0x10>
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
