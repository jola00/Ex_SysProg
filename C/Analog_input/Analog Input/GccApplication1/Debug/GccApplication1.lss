
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009eb  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000089b  00000000  00000000  00000cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003de  00000000  00000000  00001562  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001940  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000490  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014f  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001fb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  78:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADCsingleREAD>:

int ADCsingleREAD(uint8_t adctouse)
{
	int ADCval;

	ADMUX = adctouse;         // use #1 ADC
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
  86:	80 81       	ld	r24, Z
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
  8c:	80 81       	ld	r24, Z
  8e:	8f 7d       	andi	r24, 0xDF	; 223
  90:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 8Mhz
  92:	ea e7       	ldi	r30, 0x7A	; 122
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	87 60       	ori	r24, 0x07	; 7
  9a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Enable the ADC
  9c:	80 81       	ld	r24, Z
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
  a8:	80 81       	ld	r24, Z
  aa:	86 fd       	sbrc	r24, 6
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <ADCsingleREAD+0x28>


	ADCval = ADCL;
  ae:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
  b2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

	return ADCval;
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	98 2f       	mov	r25, r24
  ba:	88 27       	eor	r24, r24
}
  bc:	82 0f       	add	r24, r18
  be:	91 1d       	adc	r25, r1
  c0:	08 95       	ret

000000c2 <main>:


int main(void)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	00 d0       	rcall	.+0      	; 0xc8 <main+0x6>
  c8:	00 d0       	rcall	.+0      	; 0xca <main+0x8>
  ca:	1f 92       	push	r1
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
    usart_init();
  d0:	0e 94 82 00 	call	0x104	; 0x104 <usart_init>
	char buffer[5];
	int value;
	
    while (1)	{	
		value = ADCsingleREAD(0);
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 40 00 	call	0x80	; 0x80 <ADCsingleREAD>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  da:	4a e0       	ldi	r20, 0x0A	; 10
  dc:	be 01       	movw	r22, r28
  de:	6f 5f       	subi	r22, 0xFF	; 255
  e0:	7f 4f       	sbci	r23, 0xFF	; 255
  e2:	0e 94 a5 00 	call	0x14a	; 0x14a <__itoa_ncheck>
		itoa(value, buffer, 10);
		buffer[4] = '\0';
  e6:	1d 82       	std	Y+5, r1	; 0x05
		usart_send_string(buffer);
  e8:	ce 01       	movw	r24, r28
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	0e 94 96 00 	call	0x12c	; 0x12c <usart_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 e6       	ldi	r24, 0x69	; 105
  f4:	98 e1       	ldi	r25, 0x18	; 24
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x34>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x3e>
 100:	00 00       	nop
 102:	e8 cf       	rjmp	.-48     	; 0xd4 <main+0x12>

00000104 <usart_init>:
	UDR0 = to_send;
}

uint8_t usart_receive(){
		return (uint8_t)UDR0;
}
 104:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 108:	87 e6       	ldi	r24, 0x67	; 103
 10a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 10e:	e1 ec       	ldi	r30, 0xC1	; 193
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 61       	ori	r24, 0x18	; 24
 116:	80 83       	st	Z, r24
 118:	80 81       	ld	r24, Z
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	80 83       	st	Z, r24
 11e:	e2 ec       	ldi	r30, 0xC2	; 194
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	86 60       	ori	r24, 0x06	; 6
 126:	80 83       	st	Z, r24
 128:	78 94       	sei
 12a:	08 95       	ret

0000012c <usart_send_string>:
void usart_send_string(const char *to_send){
 12c:	fc 01       	movw	r30, r24
	while(*to_send!= '\0'){
 12e:	90 81       	ld	r25, Z
 130:	99 23       	and	r25, r25
 132:	39 f0       	breq	.+14     	; 0x142 <usart_send_string+0x16>
 134:	31 96       	adiw	r30, 0x01	; 1

	sei();                                     
}

void usart_send(const uint8_t to_send){
	UDR0 = to_send;
 136:	a6 ec       	ldi	r26, 0xC6	; 198
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	9c 93       	st	X, r25

uint8_t usart_receive(){
		return (uint8_t)UDR0;
}
void usart_send_string(const char *to_send){
	while(*to_send!= '\0'){
 13c:	91 91       	ld	r25, Z+
 13e:	91 11       	cpse	r25, r1
 140:	fc cf       	rjmp	.-8      	; 0x13a <usart_send_string+0xe>

	sei();                                     
}

void usart_send(const uint8_t to_send){
	UDR0 = to_send;
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 148:	08 95       	ret

0000014a <__itoa_ncheck>:
 14a:	bb 27       	eor	r27, r27
 14c:	4a 30       	cpi	r20, 0x0A	; 10
 14e:	31 f4       	brne	.+12     	; 0x15c <__itoa_ncheck+0x12>
 150:	99 23       	and	r25, r25
 152:	22 f4       	brpl	.+8      	; 0x15c <__itoa_ncheck+0x12>
 154:	bd e2       	ldi	r27, 0x2D	; 45
 156:	90 95       	com	r25
 158:	81 95       	neg	r24
 15a:	9f 4f       	sbci	r25, 0xFF	; 255
 15c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__utoa_common>

00000160 <__utoa_ncheck>:
 160:	bb 27       	eor	r27, r27

00000162 <__utoa_common>:
 162:	fb 01       	movw	r30, r22
 164:	55 27       	eor	r21, r21
 166:	aa 27       	eor	r26, r26
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	aa 1f       	adc	r26, r26
 16e:	a4 17       	cp	r26, r20
 170:	10 f0       	brcs	.+4      	; 0x176 <__utoa_common+0x14>
 172:	a4 1b       	sub	r26, r20
 174:	83 95       	inc	r24
 176:	50 51       	subi	r21, 0x10	; 16
 178:	b9 f7       	brne	.-18     	; 0x168 <__utoa_common+0x6>
 17a:	a0 5d       	subi	r26, 0xD0	; 208
 17c:	aa 33       	cpi	r26, 0x3A	; 58
 17e:	08 f0       	brcs	.+2      	; 0x182 <__utoa_common+0x20>
 180:	a9 5d       	subi	r26, 0xD9	; 217
 182:	a1 93       	st	Z+, r26
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	79 f7       	brne	.-34     	; 0x166 <__utoa_common+0x4>
 188:	b1 11       	cpse	r27, r1
 18a:	b1 93       	st	Z+, r27
 18c:	11 92       	st	Z+, r1
 18e:	cb 01       	movw	r24, r22
 190:	0c 94 ca 00 	jmp	0x194	; 0x194 <strrev>

00000194 <strrev>:
 194:	dc 01       	movw	r26, r24
 196:	fc 01       	movw	r30, r24
 198:	67 2f       	mov	r22, r23
 19a:	71 91       	ld	r23, Z+
 19c:	77 23       	and	r23, r23
 19e:	e1 f7       	brne	.-8      	; 0x198 <strrev+0x4>
 1a0:	32 97       	sbiw	r30, 0x02	; 2
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <strrev+0x18>
 1a4:	7c 91       	ld	r23, X
 1a6:	6d 93       	st	X+, r22
 1a8:	70 83       	st	Z, r23
 1aa:	62 91       	ld	r22, -Z
 1ac:	ae 17       	cp	r26, r30
 1ae:	bf 07       	cpc	r27, r31
 1b0:	c8 f3       	brcs	.-14     	; 0x1a4 <strrev+0x10>
 1b2:	08 95       	ret

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
