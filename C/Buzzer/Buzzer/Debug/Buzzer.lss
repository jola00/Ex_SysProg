
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e2  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000278  00000000  00000000  00000f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000011b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000364  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c1  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001675  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_1>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  78:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init>:
#include <avr/io.h>
#include <avr/interrupt.h>

void init(void){
	//clear PD2 and PD3
	DDRD &= ~((1 << DDD2) | (1 << DDD3));
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	83 7f       	andi	r24, 0xF3	; 243
  84:	8a b9       	out	0x0a, r24	; 10
	
	// set PD4 output
	DDRD |= (1 << DDD4);
  86:	54 9a       	sbi	0x0a, 4	; 10

	// sink PD4
	PORTD &= ~(1 << PORTD4);
  88:	5c 98       	cbi	0x0b, 4	; 11
	
	//turn ON the PullUP
	PORTD |= ((1 << PORTD2) | (1 << PORTD3));
  8a:	8b b1       	in	r24, 0x0b	; 11
  8c:	8c 60       	ori	r24, 0x0C	; 12
  8e:	8b b9       	out	0x0b, r24	; 11
	//PD2 and PD3 is now an input with pull-up enabled
	
	//set INT0 and INT1 to trigger on falling edge
	EICRA |= ((1 << ISC01) | (1 << ISC11));
  90:	e9 e6       	ldi	r30, 0x69	; 105
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8a 60       	ori	r24, 0x0A	; 10
  98:	80 83       	st	Z, r24
	
	//turn ON INT0 and INT1
	EIMSK |= ((1 << INT0) | (1 << INT1));
  9a:	8d b3       	in	r24, 0x1d	; 29
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	8d bb       	out	0x1d, r24	; 29
	
	// set timer 0 to ctc mode
	TCCR0A |= (1 << WGM01);
  a0:	84 b5       	in	r24, 0x24	; 36
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	84 bd       	out	0x24, r24	; 36
	//set OCR0A to play chamber tone A ~ 440Hz
	OCR0A = 70;
  a6:	86 e4       	ldi	r24, 0x46	; 70
  a8:	87 bd       	out	0x27, r24	; 39
	// set prescaler to 256 and start timer
	TCCR0B |= (1 << CS02);
  aa:	85 b5       	in	r24, 0x25	; 37
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	85 bd       	out	0x25, r24	; 37
	// enable interrupt for timer 0
	TIMSK0 |= (1 << OCIE0A);
  b0:	ee e6       	ldi	r30, 0x6E	; 110
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24

	// enable general interrupts
	sei();
  ba:	78 94       	sei
  bc:	08 95       	ret

000000be <main>:

}

int main(void)
{
	init();
  be:	0e 94 40 00 	call	0x80	; 0x80 <init>
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <main+0x4>

000000c4 <__vector_1>:
	{
		; // Semikolon symbolisiert, dass hier Interrupts von Interesse sind
	}
}

ISR(INT0_vect){
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
	// set ocr to play c1 ~ 261,626Hz
	OCR0A = 118;
  d0:	86 e7       	ldi	r24, 0x76	; 118
  d2:	87 bd       	out	0x27, r24	; 39
}
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_2>:

ISR(INT1_vect){
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
	// set ocr to play chamber tone a
	OCR0A = 70;
  ec:	86 e4       	ldi	r24, 0x46	; 70
  ee:	87 bd       	out	0x27, r24	; 39
}
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_14>:

ISR (TIMER0_COMPA_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
	PORTD ^= (1 << PORTD4);
 10a:	9b b1       	in	r25, 0x0b	; 11
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	89 27       	eor	r24, r25
 110:	8b b9       	out	0x0b, r24	; 11
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
