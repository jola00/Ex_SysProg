
PotiMultiplexing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000344  000003d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000344  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800114  00800114  000003ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b45  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000840  00000000  00000000  00001001  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042d  00000000  00000000  00001841  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000456  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020a  00000000  00000000  000021a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000023ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a0 01 	jmp	0x340	; 0x340 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
static volatile int temp_val = 0;
static uint8_t changed = 1;

int main(void)
{
	usart_init();
  a6:	0e 94 3c 01 	call	0x278	; 0x278 <usart_init>
	ADMUX = 0;                // use ADC0
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);    // Right adjust for 8 bit resolution
  b6:	80 81       	ld	r24, Z
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 prescale for 16Mhz
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	87 60       	ori	r24, 0x07	; 7
  c4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);   // Set ADC Auto Trigger Enable
  c6:	80 81       	ld	r24, Z
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	80 83       	st	Z, r24
	
	ADCSRB = 0;               // 0 for free running mode
  cc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

	ADCSRA |= (1 << ADEN);    // Enable the ADC
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);    // Enable Interrupts
  d6:	80 81       	ld	r24, Z
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24

	sei();    
  e2:	78 94       	sei
	
	while (1)	{
		if (changed)	{
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e8:	88 23       	and	r24, r24
  ea:	f1 f3       	breq	.-4      	; 0xe8 <main+0x42>
			itoa(value0, buffer, 10);
  ec:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <value0>
  f0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <value0+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  f4:	4a e0       	ldi	r20, 0x0A	; 10
  f6:	6b e1       	ldi	r22, 0x1B	; 27
  f8:	71 e0       	ldi	r23, 0x01	; 1
  fa:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__itoa_ncheck>
			buffer[4] = '\0';
  fe:	cb e1       	ldi	r28, 0x1B	; 27
 100:	d1 e0       	ldi	r29, 0x01	; 1
 102:	1c 82       	std	Y+4, r1	; 0x04
			usart_send_string("Poti 1: ");
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 56 01 	call	0x2ac	; 0x2ac <usart_send_string>
			usart_send_string(buffer);
 10c:	ce 01       	movw	r24, r28
 10e:	0e 94 56 01 	call	0x2ac	; 0x2ac <usart_send_string>
			itoa(value1, buffer, 10);
 112:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <value1>
 116:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <value1+0x1>
 11a:	4a e0       	ldi	r20, 0x0A	; 10
 11c:	be 01       	movw	r22, r28
 11e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__itoa_ncheck>
			buffer[4] = '\0';
 122:	1c 82       	std	Y+4, r1	; 0x04
			usart_send_string("Poti 2: ");
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 56 01 	call	0x2ac	; 0x2ac <usart_send_string>
			usart_send_string(buffer);
 12c:	ce 01       	movw	r24, r28
 12e:	0e 94 56 01 	call	0x2ac	; 0x2ac <usart_send_string>
			changed = 0;
 132:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 136:	d6 cf       	rjmp	.-84     	; 0xe4 <main+0x3e>

00000138 <__vector_21>:
		
	}
}

ISR(ADC_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	if (!indexPoti)	{
 15a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <indexPoti>
 15e:	81 11       	cpse	r24, r1
 160:	3e c0       	rjmp	.+124    	; 0x1de <__vector_21+0xa6>
		temp_val = ADCH;
 162:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 16c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
		if (abs(temp_val - value0) > THRESHOLD)	{
 170:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 174:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 178:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <value0>
 17c:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <value0+0x1>
 180:	82 1b       	sub	r24, r18
 182:	93 0b       	sbc	r25, r19
 184:	9c 01       	movw	r18, r24
 186:	22 f4       	brpl	.+8      	; 0x190 <__vector_21+0x58>
 188:	22 27       	eor	r18, r18
 18a:	33 27       	eor	r19, r19
 18c:	28 1b       	sub	r18, r24
 18e:	39 0b       	sbc	r19, r25
 190:	22 30       	cpi	r18, 0x02	; 2
 192:	31 05       	cpc	r19, r1
 194:	dc f0       	brlt	.+54     	; 0x1cc <__vector_21+0x94>
			//changed = 1;
			value0 = temp_val;
 196:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 19a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 19e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <value0+0x1>
 1a2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <value0>
			itoa(value0, buffer, 10);
 1a6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <value0>
 1aa:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <value0+0x1>
 1ae:	4a e0       	ldi	r20, 0x0A	; 10
 1b0:	6b e1       	ldi	r22, 0x1B	; 27
 1b2:	71 e0       	ldi	r23, 0x01	; 1
 1b4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__itoa_ncheck>
			buffer[4] = '\0';
 1b8:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <buffer+0x4>
			usart_send_string("Poti 1: ");
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 56 01 	call	0x2ac	; 0x2ac <usart_send_string>
			usart_send_string(buffer);
 1c4:	8b e1       	ldi	r24, 0x1B	; 27
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 56 01 	call	0x2ac	; 0x2ac <usart_send_string>
		}
		ADMUX |= 1;
 1cc:	ec e7       	ldi	r30, 0x7C	; 124
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	80 83       	st	Z, r24
		indexPoti = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <indexPoti>
 1dc:	3c c0       	rjmp	.+120    	; 0x256 <__vector_21+0x11e>
	}
	else
	{
		temp_val = ADCH;
 1de:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 1e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
		if (abs(temp_val - value1) > THRESHOLD)	{
 1ec:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 1f0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 1f4:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <value1>
 1f8:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <value1+0x1>
 1fc:	82 1b       	sub	r24, r18
 1fe:	93 0b       	sbc	r25, r19
 200:	9c 01       	movw	r18, r24
 202:	22 f4       	brpl	.+8      	; 0x20c <__vector_21+0xd4>
 204:	22 27       	eor	r18, r18
 206:	33 27       	eor	r19, r19
 208:	28 1b       	sub	r18, r24
 20a:	39 0b       	sbc	r19, r25
 20c:	22 30       	cpi	r18, 0x02	; 2
 20e:	31 05       	cpc	r19, r1
 210:	dc f0       	brlt	.+54     	; 0x248 <__vector_21+0x110>
			//changed = 1;
			value1 = temp_val;
 212:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 216:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 21a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <value1+0x1>
 21e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <value1>
			itoa(value1, buffer, 10);
 222:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <value1>
 226:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <value1+0x1>
 22a:	4a e0       	ldi	r20, 0x0A	; 10
 22c:	6b e1       	ldi	r22, 0x1B	; 27
 22e:	71 e0       	ldi	r23, 0x01	; 1
 230:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__itoa_ncheck>
			buffer[4] = '\0';
 234:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <buffer+0x4>
			usart_send_string("Poti 2: ");
 238:	8a e0       	ldi	r24, 0x0A	; 10
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 56 01 	call	0x2ac	; 0x2ac <usart_send_string>
			usart_send_string(buffer);
 240:	8b e1       	ldi	r24, 0x1B	; 27
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 56 01 	call	0x2ac	; 0x2ac <usart_send_string>
			//changed = 0;
		}
		ADMUX &= ~1;
 248:	ec e7       	ldi	r30, 0x7C	; 124
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	8e 7f       	andi	r24, 0xFE	; 254
 250:	80 83       	st	Z, r24
		indexPoti = 0;
 252:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <indexPoti>
	}		
}
 256:	ff 91       	pop	r31
 258:	ef 91       	pop	r30
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	7f 91       	pop	r23
 264:	6f 91       	pop	r22
 266:	5f 91       	pop	r21
 268:	4f 91       	pop	r20
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <usart_init>:
	UDR0 = *to_send;
}

uint8_t usart_receive(){
		return UDR0;
}
 278:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 27c:	87 e6       	ldi	r24, 0x67	; 103
 27e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 282:	e1 ec       	ldi	r30, 0xC1	; 193
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 61       	ori	r24, 0x18	; 24
 28a:	80 83       	st	Z, r24
 28c:	e2 ec       	ldi	r30, 0xC2	; 194
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	86 60       	ori	r24, 0x06	; 6
 294:	80 83       	st	Z, r24
 296:	08 95       	ret

00000298 <usart_send>:
 298:	dc 01       	movw	r26, r24
 29a:	e0 ec       	ldi	r30, 0xC0	; 192
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	90 81       	ld	r25, Z
 2a0:	95 ff       	sbrs	r25, 5
 2a2:	fd cf       	rjmp	.-6      	; 0x29e <usart_send+0x6>
 2a4:	8c 91       	ld	r24, X
 2a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2aa:	08 95       	ret

000002ac <usart_send_string>:

void usart_send_string(const char *to_send){
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
	while(*to_send){
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 81       	ld	r18, Z
 2b4:	22 23       	and	r18, r18
 2b6:	41 f0       	breq	.+16     	; 0x2c8 <usart_send_string+0x1c>
		usart_send(to_send++);
 2b8:	ec 01       	movw	r28, r24
 2ba:	21 96       	adiw	r28, 0x01	; 1
 2bc:	0e 94 4c 01 	call	0x298	; 0x298 <usart_send>
 2c0:	ce 01       	movw	r24, r28
uint8_t usart_receive(){
		return UDR0;
}

void usart_send_string(const char *to_send){
	while(*to_send){
 2c2:	28 81       	ld	r18, Y
 2c4:	21 11       	cpse	r18, r1
 2c6:	f8 cf       	rjmp	.-16     	; 0x2b8 <usart_send_string+0xc>
		usart_send(to_send++);
	}
	usart_send(newLine);
 2c8:	83 e1       	ldi	r24, 0x13	; 19
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 4c 01 	call	0x298	; 0x298 <usart_send>
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <__itoa_ncheck>:
 2d6:	bb 27       	eor	r27, r27
 2d8:	4a 30       	cpi	r20, 0x0A	; 10
 2da:	31 f4       	brne	.+12     	; 0x2e8 <__itoa_ncheck+0x12>
 2dc:	99 23       	and	r25, r25
 2de:	22 f4       	brpl	.+8      	; 0x2e8 <__itoa_ncheck+0x12>
 2e0:	bd e2       	ldi	r27, 0x2D	; 45
 2e2:	90 95       	com	r25
 2e4:	81 95       	neg	r24
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
 2e8:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__utoa_common>

000002ec <__utoa_ncheck>:
 2ec:	bb 27       	eor	r27, r27

000002ee <__utoa_common>:
 2ee:	fb 01       	movw	r30, r22
 2f0:	55 27       	eor	r21, r21
 2f2:	aa 27       	eor	r26, r26
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	aa 1f       	adc	r26, r26
 2fa:	a4 17       	cp	r26, r20
 2fc:	10 f0       	brcs	.+4      	; 0x302 <__utoa_common+0x14>
 2fe:	a4 1b       	sub	r26, r20
 300:	83 95       	inc	r24
 302:	50 51       	subi	r21, 0x10	; 16
 304:	b9 f7       	brne	.-18     	; 0x2f4 <__utoa_common+0x6>
 306:	a0 5d       	subi	r26, 0xD0	; 208
 308:	aa 33       	cpi	r26, 0x3A	; 58
 30a:	08 f0       	brcs	.+2      	; 0x30e <__utoa_common+0x20>
 30c:	a9 5d       	subi	r26, 0xD9	; 217
 30e:	a1 93       	st	Z+, r26
 310:	00 97       	sbiw	r24, 0x00	; 0
 312:	79 f7       	brne	.-34     	; 0x2f2 <__utoa_common+0x4>
 314:	b1 11       	cpse	r27, r1
 316:	b1 93       	st	Z+, r27
 318:	11 92       	st	Z+, r1
 31a:	cb 01       	movw	r24, r22
 31c:	0c 94 90 01 	jmp	0x320	; 0x320 <strrev>

00000320 <strrev>:
 320:	dc 01       	movw	r26, r24
 322:	fc 01       	movw	r30, r24
 324:	67 2f       	mov	r22, r23
 326:	71 91       	ld	r23, Z+
 328:	77 23       	and	r23, r23
 32a:	e1 f7       	brne	.-8      	; 0x324 <strrev+0x4>
 32c:	32 97       	sbiw	r30, 0x02	; 2
 32e:	04 c0       	rjmp	.+8      	; 0x338 <strrev+0x18>
 330:	7c 91       	ld	r23, X
 332:	6d 93       	st	X+, r22
 334:	70 83       	st	Z, r23
 336:	62 91       	ld	r22, -Z
 338:	ae 17       	cp	r26, r30
 33a:	bf 07       	cpc	r27, r31
 33c:	c8 f3       	brcs	.-14     	; 0x330 <strrev+0x10>
 33e:	08 95       	ret

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>
