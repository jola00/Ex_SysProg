
PotiMultiplexing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000238  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800114  00800114  000002e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000975  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082a  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000385  00000000  00000000  0000154f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000186  00000000  00000000  00001ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 1a 01 	jmp	0x234	; 0x234 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

char buffer[5];

int main(void)
{
	usart_init();
  a6:	0e 94 b6 00 	call	0x16c	; 0x16c <usart_init>
	ADMUX = 0;                // use ADC0
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);    // Right adjust for 8 bit resolution
  b6:	80 81       	ld	r24, Z
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 prescale for 16Mhz
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	87 60       	ori	r24, 0x07	; 7
  c4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);   // Set ADC Auto Trigger Enable
  c6:	80 81       	ld	r24, Z
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	80 83       	st	Z, r24
	
	ADCSRB = 0;               // 0 for free running mode
  cc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

	ADCSRA |= (1 << ADEN);    // Enable the ADC
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);    // Enable Interrupts
  d6:	80 81       	ld	r24, Z
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24

	sei();    
  e2:	78 94       	sei
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <main+0x3e>

000000e6 <__vector_21>:
		;
	}
}

ISR(ADC_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	if (ADMUX & 0b00000001)	
 108:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 10c:	80 ff       	sbrs	r24, 0
 10e:	05 c0       	rjmp	.+10     	; 0x11a <__vector_21+0x34>
		usart_send_string("Poti 2: ");	
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <usart_send_string>
 118:	04 c0       	rjmp	.+8      	; 0x122 <__vector_21+0x3c>
	else 
		usart_send_string("Poti 1: ");	
 11a:	89 e0       	ldi	r24, 0x09	; 9
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <usart_send_string>

	itoa(ADCH, buffer, 10);
 122:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 126:	4a e0       	ldi	r20, 0x0A	; 10
 128:	64 e1       	ldi	r22, 0x14	; 20
 12a:	71 e0       	ldi	r23, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__itoa_ncheck>
	buffer[4] = '\0';
 132:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end+0x4>
	usart_send_string(buffer); // send input value
 136:	84 e1       	ldi	r24, 0x14	; 20
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <usart_send_string>
	ADMUX ^= 1;	// change ADC
 13e:	ec e7       	ldi	r30, 0x7C	; 124
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	90 81       	ld	r25, Z
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	89 27       	eor	r24, r25
 148:	80 83       	st	Z, r24
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <usart_init>:
	UDR0 = *to_send;
}

uint8_t usart_receive(){
		return UDR0;
}
 16c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 170:	87 e6       	ldi	r24, 0x67	; 103
 172:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 176:	e1 ec       	ldi	r30, 0xC1	; 193
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 61       	ori	r24, 0x18	; 24
 17e:	80 83       	st	Z, r24
 180:	e2 ec       	ldi	r30, 0xC2	; 194
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	86 60       	ori	r24, 0x06	; 6
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <usart_send>:
 18c:	dc 01       	movw	r26, r24
 18e:	e0 ec       	ldi	r30, 0xC0	; 192
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	90 81       	ld	r25, Z
 194:	95 ff       	sbrs	r25, 5
 196:	fd cf       	rjmp	.-6      	; 0x192 <usart_send+0x6>
 198:	8c 91       	ld	r24, X
 19a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 19e:	08 95       	ret

000001a0 <usart_send_string>:

void usart_send_string(const char *to_send){
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
	while(*to_send){
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 81       	ld	r18, Z
 1a8:	22 23       	and	r18, r18
 1aa:	41 f0       	breq	.+16     	; 0x1bc <usart_send_string+0x1c>
		usart_send(to_send++);
 1ac:	ec 01       	movw	r28, r24
 1ae:	21 96       	adiw	r28, 0x01	; 1
 1b0:	0e 94 c6 00 	call	0x18c	; 0x18c <usart_send>
 1b4:	ce 01       	movw	r24, r28
uint8_t usart_receive(){
		return UDR0;
}

void usart_send_string(const char *to_send){
	while(*to_send){
 1b6:	28 81       	ld	r18, Y
 1b8:	21 11       	cpse	r18, r1
 1ba:	f8 cf       	rjmp	.-16     	; 0x1ac <usart_send_string+0xc>
		usart_send(to_send++);
	}
	usart_send(newLine);
 1bc:	82 e1       	ldi	r24, 0x12	; 18
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 c6 00 	call	0x18c	; 0x18c <usart_send>
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <__itoa_ncheck>:
 1ca:	bb 27       	eor	r27, r27
 1cc:	4a 30       	cpi	r20, 0x0A	; 10
 1ce:	31 f4       	brne	.+12     	; 0x1dc <__itoa_ncheck+0x12>
 1d0:	99 23       	and	r25, r25
 1d2:	22 f4       	brpl	.+8      	; 0x1dc <__itoa_ncheck+0x12>
 1d4:	bd e2       	ldi	r27, 0x2D	; 45
 1d6:	90 95       	com	r25
 1d8:	81 95       	neg	r24
 1da:	9f 4f       	sbci	r25, 0xFF	; 255
 1dc:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__utoa_common>

000001e0 <__utoa_ncheck>:
 1e0:	bb 27       	eor	r27, r27

000001e2 <__utoa_common>:
 1e2:	fb 01       	movw	r30, r22
 1e4:	55 27       	eor	r21, r21
 1e6:	aa 27       	eor	r26, r26
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	aa 1f       	adc	r26, r26
 1ee:	a4 17       	cp	r26, r20
 1f0:	10 f0       	brcs	.+4      	; 0x1f6 <__utoa_common+0x14>
 1f2:	a4 1b       	sub	r26, r20
 1f4:	83 95       	inc	r24
 1f6:	50 51       	subi	r21, 0x10	; 16
 1f8:	b9 f7       	brne	.-18     	; 0x1e8 <__utoa_common+0x6>
 1fa:	a0 5d       	subi	r26, 0xD0	; 208
 1fc:	aa 33       	cpi	r26, 0x3A	; 58
 1fe:	08 f0       	brcs	.+2      	; 0x202 <__utoa_common+0x20>
 200:	a9 5d       	subi	r26, 0xD9	; 217
 202:	a1 93       	st	Z+, r26
 204:	00 97       	sbiw	r24, 0x00	; 0
 206:	79 f7       	brne	.-34     	; 0x1e6 <__utoa_common+0x4>
 208:	b1 11       	cpse	r27, r1
 20a:	b1 93       	st	Z+, r27
 20c:	11 92       	st	Z+, r1
 20e:	cb 01       	movw	r24, r22
 210:	0c 94 0a 01 	jmp	0x214	; 0x214 <strrev>

00000214 <strrev>:
 214:	dc 01       	movw	r26, r24
 216:	fc 01       	movw	r30, r24
 218:	67 2f       	mov	r22, r23
 21a:	71 91       	ld	r23, Z+
 21c:	77 23       	and	r23, r23
 21e:	e1 f7       	brne	.-8      	; 0x218 <strrev+0x4>
 220:	32 97       	sbiw	r30, 0x02	; 2
 222:	04 c0       	rjmp	.+8      	; 0x22c <strrev+0x18>
 224:	7c 91       	ld	r23, X
 226:	6d 93       	st	X+, r22
 228:	70 83       	st	Z, r23
 22a:	62 91       	ld	r22, -Z
 22c:	ae 17       	cp	r26, r30
 22e:	bf 07       	cpc	r27, r31
 230:	c8 f3       	brcs	.-14     	; 0x224 <strrev+0x10>
 232:	08 95       	ret

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
